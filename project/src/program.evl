import "program.eol";

operation String withCalculator(c : Calculator): String {
    return c.name + ": " + self;
}

operation allUnique(c : Collection): Boolean {
    var asSet = c.asSet();
    return c.size() == asSet.size();
}

operation Collection hasDuplicates(): Boolean {
    return self.asSet().size() == self.size();
}

context Calculator {
    constraint NameLength {
        check: self.name.length() >= 1
        message: "Calculator must have a name."
    }

    critique Description {
        check: self.description.length() >= 1
        message: "It would be nice if you defined a human-readable description of your calculator.".withCalculator(self)
    }

    constraint UniqueSymbols {
        check: allUnique(self.symbols().name)
        message: "All symbols should have unique names.".withCalculator(self)
    }

    constraint AtLeast1Input {
        check: self.inputs().size() > 0
        message: "Each calculator should have at least 1 input.".withCalculator(self)
    }

    constraint AtLeast1Output {
        check: self.outputs().size() > 0
        message: "Each calculator should have at least 1 output.".withCalculator(self)
    }

    critique AllInputsDescribed {
        check: self.inputs().declaration.description.forAll(s|s.length() > 0)
        message: "Each input symbol should have a description for usability.".withCalculator(self)
    }

    critique AllOutputsDescribed {
        check: self.outputs().declaration.description.forAll(s|s.length() > 0)
        message: "Each output symbol should have a description for usability.".withCalculator(self)
    }

    constraint AllOutputsAssignedOnce {
        check: self.outputs().forAll(o|self.hasAssignmentStep(o))
        message: "Each output symbol should be assigned at least once in your calculation steps.".withCalculator(self)
    }

    constraint AllIntermediatesAssignedOnce {
        check: self.intermediates().forAll(o|self.hasAssignmentStep(o))
        message: "Each intermediate symbol should be assigned at least once in your calculation steps.".withCalculator(self)
    }

    constraint AllAssignmentsWellTyped {
        check: self.assignmentSteps().forAll(astep|astep.symbol.type.equiv(astep.body.type()))
        message: "Each assignment step must be well-typed.".withCalculator(self)
    }

    constraint AllTestCaseInputSymbolsAreInputs {
        check: self.testCases.forAll(testCase|testCase.assignments.forAll(asgn|asgn.symbol.declaration.kind==SymbolDeclarationKind#INPUT))
        message: "Test case inputs should only assign values to input variables".withCalculator(self)
    }

    constraint AllTestCaseInputExpressionsLiteral {
        check: self.testCases.forAll(testCase|testCase.assignments.forAll(asgn|asgn.body.symbolReferences().isEmpty()))
        message: "Test case inputs should not reference any symbol in their assignments.".withCalculator(self)
    }

    constraint AllTestCaseAssignAllInputs {
        // note: using '>=' here because (a) we already ensure that each symbol assigned is an input
        //       and that there are no duplicate assignments.
        check: self.testCases.forAll(testCase|testCase.assignments.symbol.size() >= self.inputs().size())
        message: "Test case inputs should assign a value to each input.".withCalculator(self)
    }

    constraint AllTestCaseInputsUnambiguous {
        check: self.testCases.forAll(testCase|testCase.assignments.symbol.hasDuplicates())
        message: "Test case inputs may not have ambiguous assignments for input symbols.".withCalculator(self)
    }

    constraint AllTestCaseAssertionsAreBooleanTyped {
        check: self.testCases.forAll(testCase|testCase.assertions.forAll(e|isBoolTy(e.type())))
        message: "Test case assertions must all be propositions (boolean-typed expressions)".withCalculator(self)
    }

    critique AllTestCaseAssertionsMeaningful {
        check: self.testCases.forAll(testCase|testCase.assertions.forAll(e|not e.symbolReferences().isEmpty()))
        message: "Each test case assertion should have at least 1 symbol reference, or else the check if superfluous".withCalculator(self)
    }

    @lazy
    constraint AllTestCasesSatisfied {
        guard: self.satisfiesAll("AllTestCaseAssertionsAreBooleanTyped", "WellTyped", "AllIntermediatesAssignedOnce", "AllOutputsAssignedOnce")
        check: self.testCases.forAll(testCase|testCase.isSatisfied(self.steps))
        message: "Not all test cases are satisfied! Check algorithm!".withCalculator(self)
    }
}

context Expression {
    constraint WellTyped {
        check: self.isWellTyped()
        message: "Expression is ill-typed: " + self.type().serialize()
    }
}
