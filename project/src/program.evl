import "program.eol";

operation String withCalculator(c : Calculator): String {
    return c.name + ": " + self;
}

operation allUnique(c : Collection): Boolean {
    var asSet = c.asSet();
    return c.size() == asSet.size();
}

context Calculator {
    constraint NameLength {
        check: self.name.length() >= 1
        message: "Calculator must have a name."
    }

    critique Description {
        check: self.description.length() >= 1
        message: "It would be nice if you defined a human-readable description of your calculator.".withCalculator(self)
    }

    constraint UniqueSymbols {
        check: allUnique(self.symbols().name)
        message: "All symbols should have unique names.".withCalculator(self)
    }

    constraint AtLeast1Input {
        check: self.inputs().size() > 0
        message: "Each calculator should have at least 1 input.".withCalculator(self)
    }

    constraint AtLeast1Output {
        check: self.outputs().size() > 0
        message: "Each calculator should have at least 1 output.".withCalculator(self)
    }

    constraint AllOutputsAssignedOnce {
        check: self.outputs().forAll(o|self.hasAssignmentStep(o))
        message: "Each output symbol should be assigned at least once in your calculation steps.".withCalculator(self)
    }

    constraint AllAssignmentsWellTyped {
        check: self.assignmentSteps().forAll(astep|astep.symbol.type.equiv(astep.body.type()))
        message: "Each assignment step must be well-typed.".withCalculator(self)
    }

    // constraint AllTestCaseInputExpressionsConstant {
    //     check: self.testCases.forAll(testCase|testCase.assignments.forAll(asgn|asgn.symbol.declaration.kind==SymbolDeclarationKind#INPUT))
    //     message: "Test case inputs should only assign input variables".withCalculator(self)
    // }

    constraint AllTestCaseInputExpressionsLiteral {
        check: self.testCases.forAll(testCase|testCase.assignments.forAll(asgn|asgn.body.symbolReferences().isEmpty()))
        message: "Test case inputs should not reference any symbol in their assignments.".withCalculator(self)
    }
}

context Expression {
    constraint WellTyped {
        check: self.isWellTyped()
        message: "Expression is ill-typed: " + self.type().serialize()
    }
}
