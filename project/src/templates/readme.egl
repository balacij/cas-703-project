[%import "../program.eol";%]
# [%=c.name%]
[%if (c.description.length() > 0) {%]
*[%=c.description%]*
[%}%]

## Symbols

The [Inputs](#inputs) and [Outputs](#outputs) tables show variables relevant to
user interaction and usage of the [%=c.name%] calculator. The [Intermediates](#intermediates)
table shows variables strictly relevant to the underlying algorithm used for
deriving the outputs from the inputs.

### Inputs
[%var inputs = c.inputs();%]

[%if (inputs.size() == 0) {%]
There are no input symbols.
[%} else {%]
| Symbol | Description | Type |
|:------:|:-----------:|:----:|
[%    for (s in inputs) {%]
| [%=s.name%] | [%=s.declaration.description.withDefault("—")%] | [%=s.type.serialize()%] |
[%    }%]
[%}%]

### Intermediates
[%var intermediates = c.intermediates();%]

[%if (intermediates.size() == 0) {%]
There are no intermediate symbols.
[%} else {%]
| Symbol | Description | Type |
|:------:|:-----------:|:----:|
[%    for (s in intermediates) {%]
| [%=s.name%] | [%=s.declaration.description.withDefault("—")%] | [%=s.type.serialize()%] |
[%    }%]
[%}%]

### Outputs
[%var outputs = c.outputs();%]

[%if (outputs.size() == 0) {%]
There are no output symbols.
[%} else {%]
| Symbol | Description | Type |
|:------:|:-----------:|:----:|
[%  for (s in outputs) {%]
| [%=s.name%] | [%=s.declaration.description.withDefault("—")%] | [%=s.type.serialize()%] |
[%  }%]
[%}%]

## Calculation Steps
[%var steps = c.steps;%]

[%if (steps.size() == 0) {%]
There are no calculation steps;
[%} else {
    var sn = 0;
    for (step in steps) {
        sn += 1;%]
[%=sn%]. [%=step.toHRN()%]
    [%}
}%]

## Test Cases
[%var testCases = c.testCases;%]

[%if (testCases.size() == 0) {%]
There are no test cases.
[%} else {%]
The generated program was tested in a simulation against the following test
cases. An extra test stub is also created if you'd like to also test your
calculator against them.
[%  var curTC = 1;
    for (tc in testCases) {%]

### Test [%=curTC%]: [%=tc.name%]
        [%if (tc.description.length() > 0) {%]
*[%=tc.description%]*
        [%}%]

**Inputs**:
        [%for (input in tc.assignments) {%]
* [%=input.toHRN()%]
        [%}%]

**Assertions**:
        [%for (assertion in tc.assertions) {%]
* [%=assertion.toHRN()%]
        [%}%]
        [%curTC += 1;
    }%]
[%}%]

## Credits

This software is generated by Hassan Zaker and Jason Balaci as part of the 
course requirements of CAS 703 (a graduate-level course at McMaster University, 
hosted by Dr. Richard Paige).
