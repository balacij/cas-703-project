@namespace(uri="calculator", prefix="c")
package calculator;

// DESCRIBED DATA TYPES

abstract class Described {
	attr String[1] description = "";
}

// CALCULATOR

class Calculator extends Described {
    attr String[1] name;
	val SymbolDeclaration[*] symbolDeclarations;
	val CalculationStep[*] steps;
	val TestCase[*] testCases;
}

enum SymbolDeclarationKind {
	INPUT;
	INTERMEDIATE;
	OUTPUT;
}

// SYMBOL DECLARATIONS

class SymbolDeclaration extends Described {
	attr SymbolDeclarationKind[1] kind;
	val Symbol[1]#declaration symbol;
}

// CALCULATION STEPS

abstract class CalculationStep extends Described {
	op String[1] toHRN();
	op Symbol[*] dependencies();
	op Symbol[*] calculates();
}

class AssignmentStep extends CalculationStep {
	ref Symbol[1] symbol; // LHS
	val Expression[1] body; // RHS
}

class PrintStep extends CalculationStep {
	attr String[1] preface;
	ref Symbol[1] symbol;
}

// TEST CASES
class TestCase extends Described {
	attr String[1] name;
	val AssignmentStep[+] assignments;
	val Expression[+] assertions;
}

// TYPES
enum Primitive {
	TEXT;
	REAL;
	INTEGER;
	BOOLEAN;
}

abstract class Type {
	op String[1] serialize();
	op boolean[1] isNumeric();
}

class PrimitiveType extends Type {
	attr Primitive[1] primitive;
}

class VectorType extends Type {
	attr int[1] length;
	val Type[1] valueType;
}

class InvalidType extends Type {
    attr String[1] cause;
}

// EXPRESSIONS
abstract class Expression {
	op Type[1] type();
	op String[1] toHRN();
	op Symbol[*] symbolReferences();
}

class TextLiteral extends Expression {
	attr String[1] value;
}

class RealLiteral extends Expression {
	attr double[1] value;
}

class IntegerLiteral extends Expression {
	attr int[1] value;
}

class BooleanLiteral extends Expression {
	attr boolean[1] value;
}

class Symbol {
    id attr String[1] name;
    val Type[1] type;
	ref SymbolDeclaration[1]#symbol declaration;
}

class SymbolExpression extends Expression {
    ref Symbol[1] symbol;
}

enum UnaryOp {
	LOGICAL_NOT;
	NEGATION;
}

class UnaryExpression extends Expression {
	attr UnaryOp[1] operator;
	val Expression[1] body;
}

enum BinaryOp {
	// numbers (of same type)
	ADDITION; // also allowed for text and vectors
	MULTIPLICATION;
	DIVISION;
	SUBTRACTION;
	POWER;
	MODULO;

	// inequalities
	GREATER_THAN;
	GREATER_THAN_EQUAL_TO;
	LESS_THAN;
	LESS_THAN_EQUAL_TO;
	
	// booleans
	LOGICAL_AND;
	LOGICAL_OR;
	LOGICAL_IMPLIES;
	
	// any
	EQUIVALENT;
	NOT_EQUIVALENT;
}

class BinaryExpression extends Expression {
	attr BinaryOp[1] operator;
	val Expression[2] exprs;
}

enum TertiaryOp {
	IF_THEN_ELSE;
}

class TertiaryExpression extends Expression {
	attr TertiaryOp[1] operator;
	val Expression[2] exprs;
}
